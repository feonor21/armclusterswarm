version: '3.3'

# docker stack rm swarm 
# docker container prune -f && docker network prune -f && docker volume prune -f
# ./deploy.sh

services:

  ################################################################################
  ##### REVERSE PROXY TRAEFIK
  ################################################################################
  traefik:
    # Use the latest Traefik image
    image: traefik:latest
    ports:
      - 80:80
      - 443:443
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label "traefik.constraint-label=traefik-public"
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      - --providers.docker.network=traefik-public
      # Create an entrypoint "http" listening on address 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on address 443
      - --entrypoints.https.address=:443
      # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
      - --certificatesresolvers.le.acme.email=${TRAEFIK_EMAIL?Variable not set}
      # Store the Let's Encrypt certificates in the mounted volume
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # Use the TLS Challenge for Let's Encrypt
      - --certificatesresolvers.le.acme.tlschallenge=true
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik-public
        # admin-auth middleware with HTTP Basic auth
        # Using the environment variables USERNAME and HASHED_PASSWORD
        #- traefik.http.middlewares.admin-auth.basicauth.users=admin:${TRAEFIK_ADMIN_PASSWORD?Variable not set}
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        # traefik-http set up only to use the middleware to redirect to https
        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-public-http.rule=Host(`${PROXY_TRAEFIK_DOMAIN?Variable not set}`)
        - traefik.http.routers.traefik-public-http.entrypoints=http
        - traefik.http.routers.traefik-public-http.middlewares=https-redirect
        # traefik-https the actual router using HTTPS
        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-public-https.rule=Host(`${PROXY_TRAEFIK_DOMAIN?Variable not set}`)
        - traefik.http.routers.traefik-public-https.entrypoints=https
        - traefik.http.routers.traefik-public-https.tls=true
        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.traefik-public-https.service=api@internal
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.traefik-public-https.tls.certresolver=le
        # Enable HTTP Basic auth, using the middleware created above
        #- traefik.http.routers.traefik-public-https.middlewares=admin-auth
        # Define the port inside of the Docker service to use
        - traefik.http.services.traefik-public.loadbalancer.server.port=8080
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
      - traefik-public-certificates:/certificates
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public
  
  
  ################################################################################
  ##### SWARMPIT
  ################################################################################
  swarmpit:
    image: swarmpit/swarmpit:latest
    environment:
      - SWARMPIT_DB=http://swarmpitdb:5984
      - SWARMPIT_INFLUXDB=http://swarmpitinfluxdb:8086
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - traefik-public
      - agents
    deploy:
      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 512M
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.swarmpit-http.rule=Host(`${PROXY_SWARMPIT_DOMAIN?Variable not set}`)
        - traefik.http.routers.swarmpit-http.entrypoints=http
        - traefik.http.routers.swarmpit-http.middlewares=https-redirect
        - traefik.http.routers.swarmpit-https.rule=Host(`${PROXY_SWARMPIT_DOMAIN?Variable not set}`)
        - traefik.http.routers.swarmpit-https.entrypoints=https
        - traefik.http.routers.swarmpit-https.tls=true
        - traefik.http.routers.swarmpit-https.tls.certresolver=le
        - traefik.http.services.swarmpit.loadbalancer.server.port=8080

          
  swarmpitdb:
    image: treehouses/couchdb:2.3.1
    volumes:
      - swarmpitdb-data:/opt/couchdb/data
    networks:
      - agents
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  swarmpitinfluxdb:
    image: influxdb:1.7
    volumes:
      - swarmpitinflux-data:/var/lib/influxdb
    networks:
      - agents
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  swarmpitagent:
    image: swarmpit/agent:latest
    environment:
      - DOCKER_API_VERSION=1.35
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - agents
    deploy:
      mode: global
      labels:
        swarmpit.agent: 'true'
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M


  
  ################################################################################
  ##### DATADOG LOG COLLECTOR AGENT
  ################################################################################

  # datadog-agent:
  #   image: datadog/agent:latest
  #   environment:
  #     - "DD_API_KEY=${DATADOG_AGENT_API_KEY}"
  #     - "DD_LOGS_ENABLED=true"
  #     - "DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true"
  #     - "DD_AC_EXCLUDE=name:datadog-agent"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - /proc/:/host/proc/:ro
  #     - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
  #   networks:
  #     - agents
  #   deploy:
  #     mode: global
  #     restart_policy:
  #       condition: any

  ################################################################################
  ##### SIMPLE APP - WHOAMI
  ################################################################################
  whoami:
    image: traefik/whoami
    networks:
      - traefik-public
    deploy:
      mode: replicated
      replicas: 1
      labels:
        - "traefik.enable=true"
        - traefik.constraint-label=traefik-public
        - "traefik.http.routers.whoami.rule=Host(`${PROXY_WHOAMI_DOMAIN}`)"
        - "traefik.http.routers.whoami.entrypoints=http"
        - "traefik.http.services.whoami.loadbalancer.server.port=80"
        - "traefik.http.routers.whoami.service=whoami"


################################################################################
##### NEEDED EXTERNAL OVERLAY NETWORKS
################################################################################
networks:
  traefik-public:
    external:
      name: traefik-public
  agents:
    external:
      name: agents

volumes:
  traefik-public-certificates:
    external: true
  swarmpitdb-data:
    external: true
  swarmpitinflux-data:
    external: true
